import org.springframework.boot.web.client.RestClientCustomizer;
import org.springframework.http.HttpHeaders;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestClient;

@Component
public class GlobalRestClientInterceptor implements RestClientCustomizer {

    private final OAuth2AuthorizedClientService authorizedClientService;

    public GlobalRestClientInterceptor(OAuth2AuthorizedClientService authorizedClientService) {
        this.authorizedClientService = authorizedClientService;
    }

    @Override
    public void customize(RestClient.Builder builder) {
        builder.requestInterceptor((request, body, execution) -> {
            String token = getAccessToken();
            if (token != null) {
                request.getHeaders().set(HttpHeaders.AUTHORIZATION, "Bearer " + token);
            }
            return execution.execute(request, body);
        });
    }

    private String getAccessToken() {
        // Get authentication details
        OAuth2AuthenticationToken authentication =
                (OAuth2AuthenticationToken) org.springframework.security.core.context.SecurityContextHolder
                        .getContext().getAuthentication();

        if (authentication != null) {
            String clientRegistrationId = authentication.getAuthorizedClientRegistrationId();

            // Retrieve the authorized client (token)
            OAuth2AuthorizedClient authorizedClient =
                    authorizedClientService.loadAuthorizedClient(clientRegistrationId, authentication.getName());

            if (authorizedClient != null && authorizedClient.getAccessToken() != null) {
                return authorizedClient.getAccessToken().getTokenValue();
            }
        }

        return null; // No token available
    }
}
